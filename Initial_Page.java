package dna.crypto;


import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author bipin
 */
public class Initial_Page extends javax.swing.JFrame {
//    public variable initialization
//static String[] cipheredtext;
static String texts; //variable to take input from user plaintext
static char[] ptextarray;
static String cipheredtext; 
static String userplaintext;
static String plainbin="";
static int plainreplcedlength;
 static String xortext;
        static String keybin="";
        static char[] keybinarray;
        static String key;
         static String dna;
        static  String dnaop="",helix="";
         static String result;
    /**
     * Creates new form Initial_Page
     */
    public Initial_Page() {
        initComponents();
    }
 public  String plaintexts(){
     userplaintext=plaintext.getText();
        return userplaintext;
    }
 public  static String replacetext(String texts){
   ptextarray=texts.toCharArray(); //convert to plaintext
       int l=ptextarray.length; // length of characters
       int k; //random integer variable
       //expected output
     
       for(int i=0;i<l;i++){

          k=(int) ptextarray[i]; 
          if(k>=97 && k <=122){
           k=k-26;
           if(k<97){
               int m=97-k;
               k=96+m;
           }
           ptextarray[i]=(char) k;
//          System.out.println(pt[i]);
        }
          else if(k>=65 && k <=90){
           k=k-26;
           if(k<65){
               int m=65-k;
               k=64+m;
           }
           ptextarray[i]=(char) k;
//          System.out.println(pt[i]);
        }
          else if(k==32){
              k=32;
              ptextarray[i]=(char) k;
          }
//          System.out.println(pt[i]);
       }  
       return new String(ptextarray);
     
 }
 public static String getPlainBinary(){
      char[] pb;
       
       pb=cipheredtext.toCharArray();
       for(int i=0;i<pb.length;i++){
//            System.out.println(pb[i]);
            int tt=(int) pb[i];
          
         if(tt==32){
            plainbin=plainbin+("00"+Integer.toBinaryString((int) pb[i]));  
         }
         else{
             plainbin=plainbin+(0+Integer.toBinaryString(tt));
         }
       }
       return plainbin;
 }
 public static String getKeyBin(){
      
        keybinarray=key.toCharArray();
        for(int i=0;i<keybinarray.length;i++){
            int tk=(int) keybinarray[i];
            if(tk==32){
             keybin=keybin+("00"+ Integer.toBinaryString(tk));   
            }
            else{
                keybin=keybin+(0+ Integer.toBinaryString(tk));
            }
            
        }
        return keybin;
 }
 public static String getCipherText(){
         int ln=result.length();//legnth of replacedtext array
     int ln1=ln/2;
//     for(int j=0;j<ln;j++){
//         String bb=0+Integer.toBinaryString((int) rt[j]);//binary value 0 is added to make 8 bit 
         int kk=0,kl=2;
        
         for(int ll=0;ll<ln1;ll++){
         dna=result.substring(kk,kl);//dividing into 2/2 bit binary value
         kk=kk+2;
         kl=kl+2;
        
         switch(dna){
             case "00":
                  helix=helix+"A";
//                 System.out.println("A");
                 break;
               case "01":
                   helix=helix+"T";
//                 System.out.println("T");
                 break;
                   case "10":
                       helix=helix+"C";
//                 System.out.println("C");
                 break;
                       case "11":
                           helix=helix+"G";
//                 System.out.println("G");
                 break;
                       default:
                           continue;
         
         }
         
         
         
//         }
      
     
     //ascii end
        
     }
//         System.out.println(helix);
        
        dnaop=Helix.dnahelix(helix);
       String reverse=new StringBuffer(dnaop).reverse().toString();
     
//         System.out.println(reverse);  
         return reverse;
 }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        plaintext = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        keys = new javax.swing.JTextArea();
        Encrypt = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ciphertext = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("DNA CRYPTO");

        jLabel1.setText("PlainText");

        plaintext.setColumns(20);
        plaintext.setRows(5);
        jScrollPane1.setViewportView(plaintext);

        jLabel2.setText("Key");

        keys.setColumns(20);
        keys.setRows(5);
        jScrollPane2.setViewportView(keys);

        Encrypt.setText("Encrypt");
        Encrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncryptActionPerformed(evt);
            }
        });

        jLabel4.setText("Ciphertext");

        ciphertext.setColumns(20);
        ciphertext.setRows(5);
        jScrollPane3.setViewportView(ciphertext);

        jButton2.setText("Decrypt");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Encrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel2)
                        .addGap(57, 57, 57))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)))
                .addComponent(Encrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    private void EncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncryptActionPerformed
        // TODO add your handling code here:
         try {
              
//             start of try catch method 
//         Scanner sn=new Scanner(System.in);
        // char array
       
       
//       System.out.println("enter plaintext");
//       sp=sn.nextLine();
//       texts=plaintext.getText(); //input taken from textfield
//       texts=plaintext.getText();
       texts=plaintexts();
       
//       pt=texts.toCharArray(); //convert to plaintext
//       int l=pt.length; // length of characters
//       int k; //random integer variable
//       String cipheredtext; //expected output
//     
//       for(int i=0;i<l;i++){
//
//          k=(int) pt[i]; 
//          if(k>=97 && k <=122){
//           k=k-26;
//           if(k<97){
//               int m=97-k;
//               k=96+m;
//           }
//           pt[i]=(char) k;
////          System.out.println(pt[i]);
//        }
//          else if(k>=65 && k <=90){
//           k=k-26;
//           if(k<65){
//               int m=65-k;
//               k=64+m;
//           }
//           pt[i]=(char) k;
////          System.out.println(pt[i]);
//        }
//          else if(k==32){
//              k=32;
//              pt[i]=(char) k;
//          }
////          System.out.println(pt[i]);
//       }
//       cipheredtext=new String(pt);
       cipheredtext=replacetext(texts);
       plainreplcedlength=cipheredtext.length();
//       System.out.println(cipheredtext);
       //print ascii value of char
       
//       ciphertext.setText(cipheredtext);
       //plaintext binary
      
       plainbin=getPlainBinary();
//       System.out.println(plainbin);
       //key binary
//       String key=keys.getText();
       key=Otp.getOTP();
       keys.setText(key);
     keybin=getKeyBin();
//       System.out.println(keybin);
       //xor key and plaintext
       StringBuilder sb = new StringBuilder();

for(int i = 0; i < keybin.length(); i++){
    sb.append((plainbin.charAt(i) ^ keybin.charAt(i)));


}
result = sb.toString();
//System.out.println(result); 
   //xor result printed
//       xortext="bipin";
//       
//     char[] rt;//replaced text array
//     rt=xortext.toCharArray();
 dnaop=getCipherText();
//         System.out.println(dnaop);
         ciphertext.setText(dnaop);
         }
    
         catch(Exception e){
    System.out.println(e);
    
}
    }//GEN-LAST:event_EncryptActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        dispose();
        Decrypt dd1=new Decrypt();
        dd1.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Initial_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Initial_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Initial_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Initial_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

       
      
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Initial_Page().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Encrypt;
    private javax.swing.JTextArea ciphertext;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea keys;
    private javax.swing.JTextArea plaintext;
    // End of variables declaration//GEN-END:variables
}
